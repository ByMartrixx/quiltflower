package pkg;

public class TestPatternMatching {
   public void testSimple(Object obj) {
      if (obj instanceof String str) {// 5
         System.out.println(str.length());// 6
      }

   }// 8

   public void testCompound(Object obj) {
      if (obj instanceof String str && str.contains("hi")) {// 11
         System.out.println(str.length());// 12
      }

   }// 14

   public boolean testReturn(Object obj) {
      if (obj instanceof String s && s.length() > 5) {// 17
         return true;
      }

      return false;
   }

   public int testReturnTernary(Object obj) {
      return obj instanceof String s ? s.length() : 0;// 21
   }

   public int testReturnTernaryComplex(Object obj) {
      return (!(obj instanceof String s) || s.length() <= 5) && !(obj instanceof Integer) ? 1 : 4;// 25
   }

   public void testLoop(Object obj) {
      while(obj instanceof String s && s.length() > 10) {// 29
         String var4 = s.substring(1);// 30
         obj = var4.substring(1);// 31
         System.out.println(var4);// 33
      }

   }// 35

   public void testSimpleReturn(Object obj) {
      if (obj instanceof String str && str.length() > 5) {// 38 39
         return;// 40
      }

      System.out.println("test");// 44
   }// 45
}

class 'pkg/TestPatternMatching' {
   method 'testSimple (Ljava/lang/Object;)V' {
      0      4
      3      4
      4      4
      5      4
      6      4
      d      4
      e      5
      f      5
      10      5
      11      5
      12      5
      13      5
      14      5
      15      5
      18      8
   }

   method 'testCompound (Ljava/lang/Object;)V' {
      0      11
      3      11
      4      11
      5      11
      6      11
      d      11
      e      11
      f      11
      10      11
      11      11
      12      11
      13      11
      14      11
      17      12
      18      12
      19      12
      1a      12
      1b      12
      1c      12
      1d      12
      1e      12
      21      15
   }

   method 'testReturn (Ljava/lang/Object;)Z' {
      0      18
      3      18
      4      18
      5      18
      6      18
      d      18
      e      18
      f      18
      10      18
      11      18
      12      18
      13      18
      16      19
      1a      22
      1b      19
   }

   method 'testReturnTernary (Ljava/lang/Object;)I' {
      0      26
      3      26
      4      26
      5      26
      6      26
      d      26
      e      26
      f      26
      10      26
      11      26
      15      26
      16      26
   }

   method 'testReturnTernaryComplex (Ljava/lang/Object;)I' {
      0      30
      3      30
      4      30
      5      30
      6      30
      d      30
      e      30
      f      30
      10      30
      11      30
      12      30
      13      30
      16      30
      17      30
      18      30
      19      30
      1a      30
      1d      30
      21      30
      22      30
   }

   method 'testLoop (Ljava/lang/Object;)V' {
      0      34
      3      34
      4      34
      5      34
      d      34
      e      34
      f      34
      10      34
      11      34
      12      34
      13      34
      14      34
      17      35
      18      35
      19      35
      1a      35
      1b      35
      1c      35
      1d      36
      1e      36
      1f      36
      20      36
      21      36
      22      36
      23      37
      24      37
      25      37
      26      37
      27      37
      28      37
      29      37
      2d      40
   }

   method 'testSimpleReturn (Ljava/lang/Object;)V' {
      0      43
      3      43
      4      43
      5      43
      6      43
      d      43
      e      43
      f      43
      10      43
      11      43
      12      43
      13      43
      16      44
      17      47
      18      47
      19      47
      1a      47
      1b      47
      1c      47
      1d      47
      1e      47
      1f      48
   }
}

Lines mapping:
5 <-> 5
6 <-> 6
8 <-> 9
11 <-> 12
12 <-> 13
14 <-> 16
17 <-> 19
21 <-> 27
25 <-> 31
29 <-> 35
30 <-> 36
31 <-> 37
33 <-> 38
35 <-> 41
38 <-> 44
39 <-> 44
40 <-> 45
44 <-> 48
45 <-> 49
