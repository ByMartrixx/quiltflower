package pkg;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class TestNestedAnonymousClass {
   public Runnable r = new TestNestedAnonymousClass.B() {
      public void run() {
         ExecutorService ex = Executors.newFixedThreadPool(1);// 9
         ex.submit(new Runnable() {// 10
            public void run() {
               // $FF: Couldn't be decompiled
               // Bytecode:
               // 00: getstatic java/lang/System.out Ljava/io/PrintStream;
               // 03: ldc "Hello"
               // 05: invokevirtual java/io/PrintStream.println (Ljava/lang/String;)V
               // 08: aload 0
               // 09: getfield pkg/TestNestedAnonymousClass$1$1.this$1 Lpkg/TestNestedAnonymousClass$1;
               // 0c: invokevirtual pkg/TestNestedAnonymousClass$1.b ()V
               // 0f: aload 0
               // 10: getfield pkg/TestNestedAnonymousClass$1$1.this$1 Lpkg/TestNestedAnonymousClass$1;
               // 13: getfield pkg/TestNestedAnonymousClass$1.this$0 Lpkg/TestNestedAnonymousClass;
               // 16: invokevirtual pkg/TestNestedAnonymousClass.a ()V
               // 19: return
            }
         });
      }// 17
   };

   public void a() {
   }// 28

   public abstract class B implements Runnable {
      protected void b() {
      }// 23
   }
}

class 'pkg/TestNestedAnonymousClass$1' {
   method 'run ()V' {
      0      8
      1      8
      2      8
      3      8
      4      8
      5      9
      e      9
      f      9
      10      9
      11      9
      12      9
      14      26
   }
}

class 'pkg/TestNestedAnonymousClass' {
   method 'a ()V' {
      0      30
   }
}

class 'pkg/TestNestedAnonymousClass$B' {
   method 'b ()V' {
      0      34
   }
}

Lines mapping:
9 <-> 9
10 <-> 10
17 <-> 27
23 <-> 35
28 <-> 31
