package pkg;

import java.lang.runtime.SwitchBootstraps;

public class TestSwitchPatternMatching2 {
   static void testTriangle(TestSwitchPatternMatching2.Shape s) {
      TestSwitchPatternMatching2.Shape var1 = s;// 5
      byte var2 = 0;

      while(true) {
         switch(SwitchBootstraps.typeSwitch<"typeSwitch",TestSwitchPatternMatching2.Triangle,TestSwitchPatternMatching2.Triangle>(
            var1, var2
         )) {
         case -1:
            System.out.println("null");// 11
            return;// 15
         case 0:
            TestSwitchPatternMatching2.Triangle t = (TestSwitchPatternMatching2.Triangle)var1;// 6
            if (!(t.calculateArea() > 100.0)) {
               var2 = 1;
               break;
            }

            System.out.println("Large triangle");// 7
            return;
         case 1:
            TestSwitchPatternMatching2.Triangle t = (TestSwitchPatternMatching2.Triangle)var1;// 8
            System.out.println("Small triangle");// 9
            return;
         default:
            System.out.println("Non-triangle");// 13
            return;
         }
      }
   }

   private abstract class Shape {
      abstract double calculateArea();
   }

   private class Triangle extends TestSwitchPatternMatching2.Shape {
      @Override
      double calculateArea() {
         return 0.0;// 25
      }
   }
}

class 'pkg/TestSwitchPatternMatching2' {
   method 'testTriangle (Lpkg/TestSwitchPatternMatching2$Shape;)V' {
      0      6
      1      6
      2      7
      3      7
      4      11
      5      11
      6      10
      7      10
      8      10
      9      10
      a      10
      b      10
      24      17
      25      17
      26      17
      27      17
      28      17
      29      18
      2a      18
      2b      18
      2c      18
      2d      18
      2e      18
      2f      18
      30      18
      31      18
      34      19
      35      19
      36      20
      39      23
      3a      23
      3b      23
      3c      23
      3d      23
      3e      23
      3f      23
      40      23
      44      26
      45      26
      46      26
      47      26
      48      26
      49      26
      4a      27
      4b      27
      4c      27
      4d      27
      4e      27
      4f      27
      50      27
      51      27
      55      14
      56      14
      57      14
      58      14
      59      14
      5a      14
      5b      14
      5c      14
      60      30
      61      30
      62      30
      63      30
      64      30
      65      30
      66      30
      67      30
      6b      15
   }
}

class 'pkg/TestSwitchPatternMatching2$Triangle' {
   method 'calculateArea ()D' {
      0      43
      1      43
   }
}

Lines mapping:
5 <-> 7
6 <-> 18
7 <-> 24
8 <-> 27
9 <-> 28
11 <-> 15
13 <-> 31
15 <-> 16
25 <-> 44
