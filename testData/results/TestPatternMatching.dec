package java16;

public class TestPatternMatching {
   public void testSimple(Object var1) {
      if (var1 instanceof String var2) {// 5
         System.out.println(var2.length());// 6
      }

   }// 8

   public void testCompound(Object var1) {
      if (var1 instanceof String) {// 11
         String var2 = (String)var1;
         if (var2.contains("hi")) {
            System.out.println(var2.length());// 12
         }
      }

   }// 14

   public boolean testReturn(Object var1) {
      if (var1 instanceof String) {// 17
         String var2 = (String)var1;
         if (var2.length() > 5) {
            return true;
         }
      }

      return false;
   }

   public int testReturnTernary(Object var1) {
      int var10000;
      if (var1 instanceof String var2) {// 21
         var10000 = var2.length();
      } else {
         var10000 = 0;
      }

      return var10000;
   }

   public int testReturnTernaryComplex(Object var1) {
      if (var1 instanceof String) {// 25
         String var2 = (String)var1;
         if (var2.length() > 5) {
            return 4;
         }
      }

      return !(var1 instanceof Integer) ? 1 : 4;
   }

   public void testLoop(Object var1) {
      while(true) {
         if (var1 instanceof String) {// 29
            String var2 = (String)var1;
            if (var2.length() > 10) {
               var2 = var2.substring(1);// 30
               var1 = var2.substring(1);// 31
               System.out.println(var2);// 33
               continue;
            }
         }

         return;// 35
      }
   }
}

class 'java16/TestPatternMatching' {
   method 'testSimple (Ljava/lang/Object;)V' {
      0      4
      3      4
      4      4
      5      4
      6      4
      d      4
      e      5
      f      5
      10      5
      11      5
      12      5
      13      5
      14      5
      15      5
      18      8
   }

   method 'testCompound (Ljava/lang/Object;)V' {
      0      11
      3      11
      4      11
      5      11
      6      11
      a      12
      b      12
      c      12
      d      12
      e      13
      f      13
      10      13
      11      13
      12      13
      13      13
      14      13
      17      14
      18      14
      19      14
      1a      14
      1b      14
      1c      14
      1d      14
      1e      14
      21      18
   }

   method 'testReturn (Ljava/lang/Object;)Z' {
      0      21
      3      21
      4      21
      5      21
      6      21
      a      22
      b      22
      c      22
      d      22
      e      23
      f      23
      10      23
      11      23
      12      23
      13      23
      16      24
      1a      28
      1b      24
   }

   method 'testReturnTernary (Ljava/lang/Object;)I' {
      0      33
      3      33
      4      33
      5      33
      6      33
      d      33
      e      34
      f      34
      10      34
      11      34
      15      36
      16      39
   }

   method 'testReturnTernaryComplex (Ljava/lang/Object;)I' {
      0      43
      3      43
      4      43
      5      43
      6      43
      a      44
      b      44
      c      44
      d      44
      e      45
      f      45
      10      45
      11      45
      12      45
      13      45
      16      50
      17      50
      18      50
      19      50
      1a      50
      1d      46
      21      50
      22      46
   }

   method 'testLoop (Ljava/lang/Object;)V' {
      0      55
      3      55
      4      55
      5      55
      6      55
      a      56
      b      56
      c      56
      d      56
      e      57
      f      57
      10      57
      11      57
      12      57
      13      57
      14      57
      17      58
      18      58
      19      58
      1a      58
      1b      58
      1c      58
      1d      59
      1e      59
      1f      59
      20      59
      21      59
      22      59
      23      60
      24      60
      25      60
      26      60
      27      60
      28      60
      29      60
      2a      61
      2d      65
   }
}

Lines mapping:
5 <-> 5
6 <-> 6
8 <-> 9
11 <-> 12
12 <-> 15
14 <-> 19
17 <-> 22
21 <-> 34
25 <-> 44
29 <-> 56
30 <-> 59
31 <-> 60
33 <-> 61
35 <-> 66
