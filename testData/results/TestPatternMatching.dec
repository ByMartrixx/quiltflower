package java16;

public class TestPatternMatching {
   public void testSimple(Object var1) {
      if (var1 instanceof String) {// 5
         String var2 = (String)var1;
         System.out.println(var2.length());// 6
      }

   }// 8

   public void testCompound(Object var1) {
      if (var1 instanceof String) {// 11
         String var2 = (String)var1;
         if (var2.contains("hi")) {
            System.out.println(var2.length());// 12
         }
      }

   }// 14

   public boolean testReturn(Object var1) {
      if (var1 instanceof String) {// 17
         String var2 = (String)var1;
         if (var2.length() > 5) {
            return true;
         }
      }

      return false;
   }

   public int testReturnTernary(Object var1) {
      int var10000;
      if (var1 instanceof String) {// 21
         String var2 = (String)var1;
         var10000 = var2.length();
      } else {
         var10000 = 0;
      }

      return var10000;
   }

   public int testReturnTernaryComplex(Object var1) {
      if (var1 instanceof String) {// 25
         String var2 = (String)var1;
         if (var2.length() > 5) {
            return 4;
         }
      }

      return !(var1 instanceof Integer) ? 1 : 4;
   }

   public void testLoop(Object var1) {
      while(true) {
         if (var1 instanceof String) {// 29
            String var2 = (String)var1;
            if (var2.length() > 10) {
               var2 = var2.substring(1);// 30
               var1 = var2.substring(1);// 31
               System.out.println(var2);// 33
               continue;
            }
         }

         return;// 35
      }
   }
}

class 'java16/TestPatternMatching' {
   method 'testSimple (Ljava/lang/Object;)V' {
      0      4
      3      4
      4      4
      5      4
      6      4
      a      5
      b      5
      c      5
      d      5
      e      6
      f      6
      10      6
      11      6
      12      6
      13      6
      14      6
      15      6
      18      9
   }

   method 'testCompound (Ljava/lang/Object;)V' {
      0      12
      3      12
      4      12
      5      12
      6      12
      a      13
      b      13
      c      13
      d      13
      e      14
      f      14
      10      14
      11      14
      12      14
      13      14
      14      14
      17      15
      18      15
      19      15
      1a      15
      1b      15
      1c      15
      1d      15
      1e      15
      21      19
   }

   method 'testReturn (Ljava/lang/Object;)Z' {
      0      22
      3      22
      4      22
      5      22
      6      22
      a      23
      b      23
      c      23
      d      23
      e      24
      f      24
      10      24
      11      24
      12      24
      13      24
      16      25
      1a      29
      1b      25
   }

   method 'testReturnTernary (Ljava/lang/Object;)I' {
      0      34
      3      34
      4      34
      5      34
      6      34
      a      35
      b      35
      c      35
      d      35
      e      36
      f      36
      10      36
      11      36
      15      38
      16      41
   }

   method 'testReturnTernaryComplex (Ljava/lang/Object;)I' {
      0      45
      3      45
      4      45
      5      45
      6      45
      a      46
      b      46
      c      46
      d      46
      e      47
      f      47
      10      47
      11      47
      12      47
      13      47
      16      52
      17      52
      18      52
      19      52
      1a      52
      1d      48
      21      52
      22      48
   }

   method 'testLoop (Ljava/lang/Object;)V' {
      0      57
      3      57
      4      57
      5      57
      6      57
      a      58
      b      58
      c      58
      d      58
      e      59
      f      59
      10      59
      11      59
      12      59
      13      59
      14      59
      17      60
      18      60
      19      60
      1a      60
      1b      60
      1c      60
      1d      61
      1e      61
      1f      61
      20      61
      21      61
      22      61
      23      62
      24      62
      25      62
      26      62
      27      62
      28      62
      29      62
      2a      63
      2d      67
   }
}

Lines mapping:
5 <-> 5
6 <-> 7
8 <-> 10
11 <-> 13
12 <-> 16
14 <-> 20
17 <-> 23
21 <-> 35
25 <-> 46
29 <-> 58
30 <-> 61
31 <-> 62
33 <-> 63
35 <-> 68
