package java16;

public class TestPatternMatching {
   public void testSimple(Object var1) {
      if (var1 instanceof String var2) {// 5
         System.out.println(var2.length());// 6
      }

   }// 8

   public void testCompound(Object var1) {
      if (var1 instanceof String) {// 11
         String var2 = (String)var1;
         if (var2.contains("hi")) {
            System.out.println(var2.length());// 12
         }
      }

   }// 14

   public boolean testReturn(Object var1) {
      if (var1 instanceof String) {// 17
         String var2 = (String)var1;
         if (var2.length() > 5) {
            return true;
         }
      }

      return false;
   }

   public int testReturnTernary(Object var1) {
      return var1 instanceof String var2 ? var2.length() : 0;// 21
   }

   public int testReturnTernaryComplex(Object var1) {
      if (var1 instanceof String) {// 25
         String var2 = (String)var1;
         if (var2.length() > 5) {
            return 4;
         }
      }

      return !(var1 instanceof Integer) ? 1 : 4;
   }

   public void testLoop(Object var1) {
      while(true) {
         if (var1 instanceof String) {// 29
            String var2 = (String)var1;
            if (var2.length() > 10) {
               var2 = var2.substring(1);// 30
               var1 = var2.substring(1);// 31
               System.out.println(var2);// 33
               continue;
            }
         }

         return;// 35
      }
   }
}

class 'java16/TestPatternMatching' {
   method 'testSimple (Ljava/lang/Object;)V' {
      0      4
      3      4
      4      4
      5      4
      6      4
      d      4
      e      5
      f      5
      10      5
      11      5
      12      5
      13      5
      14      5
      15      5
      18      8
   }

   method 'testCompound (Ljava/lang/Object;)V' {
      0      11
      3      11
      4      11
      5      11
      6      11
      a      12
      b      12
      c      12
      d      12
      e      13
      f      13
      10      13
      11      13
      12      13
      13      13
      14      13
      17      14
      18      14
      19      14
      1a      14
      1b      14
      1c      14
      1d      14
      1e      14
      21      18
   }

   method 'testReturn (Ljava/lang/Object;)Z' {
      0      21
      3      21
      4      21
      5      21
      6      21
      a      22
      b      22
      c      22
      d      22
      e      23
      f      23
      10      23
      11      23
      12      23
      13      23
      16      24
      1a      28
      1b      24
   }

   method 'testReturnTernary (Ljava/lang/Object;)I' {
      0      32
      3      32
      4      32
      5      32
      6      32
      d      32
      e      32
      f      32
      10      32
      11      32
      15      32
      16      32
   }

   method 'testReturnTernaryComplex (Ljava/lang/Object;)I' {
      0      36
      3      36
      4      36
      5      36
      6      36
      a      37
      b      37
      c      37
      d      37
      e      38
      f      38
      10      38
      11      38
      12      38
      13      38
      16      43
      17      43
      18      43
      19      43
      1a      43
      1d      39
      21      43
      22      39
   }

   method 'testLoop (Ljava/lang/Object;)V' {
      0      48
      3      48
      4      48
      5      48
      6      48
      a      49
      b      49
      c      49
      d      49
      e      50
      f      50
      10      50
      11      50
      12      50
      13      50
      14      50
      17      51
      18      51
      19      51
      1a      51
      1b      51
      1c      51
      1d      52
      1e      52
      1f      52
      20      52
      21      52
      22      52
      23      53
      24      53
      25      53
      26      53
      27      53
      28      53
      29      53
      2a      54
      2d      58
   }
}

Lines mapping:
5 <-> 5
6 <-> 6
8 <-> 9
11 <-> 12
12 <-> 15
14 <-> 19
17 <-> 22
21 <-> 33
25 <-> 37
29 <-> 49
30 <-> 52
31 <-> 53
33 <-> 54
35 <-> 59
