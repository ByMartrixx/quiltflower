package pkg;

public abstract class TestAnonymousClass {
   public static final Runnable R3 = new Runnable() {
      @Override
      public void run() {
         boolean var1 = true;// 28
         boolean var2 = true;// 29
      }// 30
   };
   public static final Runnable R = new Runnable() {
      @Override
      public void run() {
         boolean var1 = true;// 45
         boolean var2 = true;// 46
      }// 47
   };
   public static final Runnable R1 = new Runnable() {
      @Override
      public void run() {
         boolean var1 = true;// 53
         boolean var2 = true;// 54
      }// 55
   };
   private final TestAnonymousClass.InnerRecursive y = new TestAnonymousClass.InnerRecursive(new TestAnonymousClass.InnerRecursive((TestAnonymousClass.InnerRecursive)null) {
      @Override
      void foo() {
         boolean var1 = true;// 75
         boolean var2 = true;// 76
         boolean var3 = true;// 77
      }// 78
   }) {
      int v = 5;
      int t = 5;
      int j = 5;
      int o = 5;
   };
   private final TestAnonymousClass.InnerRecursive x = new TestAnonymousClass.InnerRecursive(new TestAnonymousClass.InnerRecursive((TestAnonymousClass.InnerRecursive)null) {
      @Override
      void foo() {
         boolean var1 = true;// 90
         boolean var2 = true;// 91
         boolean var3 = true;// 92
      }// 93
   }) {
      int v = 5;
      int t = 5;
      int j = 5;
      int o = 5;
   };

   void foo(int var1) throws Exception {
      if (var1 > 0) {// 10
         TestAnonymousClass.I var2 = new TestAnonymousClass.I() {// 11
            @Override
            public void foo() throws Exception {
               boolean var1 = true;// 13
               boolean var2 = true;// 14
            }// 15
         };
         var2.foo();// 17
      } else {
         System.out.println(5);// 21
      }

   }// 23

   void boo() {
      boolean var1 = true;// 35
   }// 36

   void zoo() {
      boolean var1 = true;// 39
   }// 40

   interface I {
      void foo() throws Exception;
   }

   private static class Inner {
      private static Runnable R_I = new Runnable() {
         @Override
         public void run() {
            boolean var1 = true;// 66
            boolean var2 = true;// 67
         }// 68
      };
   }

   static class InnerRecursive {
      TestAnonymousClass.InnerRecursive r;

      public InnerRecursive(TestAnonymousClass.InnerRecursive var1) {
         this.r = var1;// 105
      }// 106

      void foo() {
      }// 110
   }
}

class 'pkg/TestAnonymousClass$2' {
   method 'run ()V' {
      0      6
      1      6
      2      7
      3      7
      4      8
   }
}

class 'pkg/TestAnonymousClass$3' {
   method 'run ()V' {
      0      13
      1      13
      2      14
      3      14
      4      15
   }
}

class 'pkg/TestAnonymousClass$4' {
   method 'run ()V' {
      0      20
      1      20
      2      21
      3      21
      4      22
   }
}

class 'pkg/TestAnonymousClass$5' {
   method 'foo ()V' {
      0      27
      1      27
      2      28
      3      28
      4      29
      5      29
      6      30
   }
}

class 'pkg/TestAnonymousClass$7' {
   method 'foo ()V' {
      0      40
      1      40
      2      41
      3      41
      4      42
      5      42
      6      43
   }
}

class 'pkg/TestAnonymousClass$1' {
   method 'foo ()V' {
      0      56
      1      56
      2      57
      3      57
      4      58
   }
}

class 'pkg/TestAnonymousClass' {
   method 'foo (I)V' {
      0      52
      1      52
      c      53
      d      60
      e      60
      f      60
      10      60
      11      60
      12      60
      16      62
      17      62
      18      62
      19      62
      1a      62
      1d      65
   }

   method 'boo ()V' {
      0      68
      1      68
      2      69
   }

   method 'zoo ()V' {
      0      72
      1      72
      2      73
   }
}

class 'pkg/TestAnonymousClass$Inner$1' {
   method 'run ()V' {
      0      83
      1      83
      2      84
      3      84
      4      85
   }
}

class 'pkg/TestAnonymousClass$InnerRecursive' {
   method '<init> (Lpkg/TestAnonymousClass$InnerRecursive;)V' {
      4      93
      5      93
      6      93
      7      93
      8      93
      9      94
   }

   method 'foo ()V' {
      0      97
   }
}

Lines mapping:
10 <-> 53
11 <-> 54
13 <-> 57
14 <-> 58
15 <-> 59
17 <-> 61
21 <-> 63
23 <-> 66
28 <-> 7
29 <-> 8
30 <-> 9
35 <-> 69
36 <-> 70
39 <-> 73
40 <-> 74
45 <-> 14
46 <-> 15
47 <-> 16
53 <-> 21
54 <-> 22
55 <-> 23
66 <-> 84
67 <-> 85
68 <-> 86
75 <-> 28
76 <-> 29
77 <-> 30
78 <-> 31
90 <-> 41
91 <-> 42
92 <-> 43
93 <-> 44
105 <-> 94
106 <-> 95
110 <-> 98
Not mapped:
18
104
